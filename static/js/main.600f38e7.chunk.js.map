{"version":3,"sources":["Assets/Images/Usericon.png","Assets/Components/MyCalendar.js","Assets/Actions/Actions.js","Assets/Components/Userlist.js","App.js","serviceWorker.js","Assets/Reducers/ActivityReducer.js","Assets/Reducers/CombineReducers.js","index.js"],"names":["module","exports","localizer","momentLocalizer","moment","connect","store","userActivity","props","useractivity","map","d","i","start","Date","start_time","end","end_time","id","events","startAccessor","endAccessor","style","height","activityRecord","activities","type","payload","Userlist","state","userrecord","showModal","handleOpenModal","n","setState","activity_periods","handleCloseModal","this","data","members","className","Card","Img","variant","src","icon","Body","Title","real_name","Text","tz","Button","onClick","isOpen","contentLabel","Component","dispatch","bindActionCreators","App","Boolean","window","location","hostname","match","defaultstate","combineReducers","action","createStore","reducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ouBAAAA,EAAOC,QAAU,IAA0B,sC,uUCMrCC,EAAYC,YAAgBC,KA8BnBC,eANS,SAAAC,GACpB,MAAM,CACFC,aAAcD,EAAMC,gBAIY,KAAzBF,EA5BI,SAAAG,GACf,IAAMC,EAAcD,EAAMD,aAAaG,KAAK,SAACC,EAAEC,GAE3C,MAAO,CACHC,MAAO,IAAIC,KAAKH,EAAEI,YAClBC,IAAK,IAAIF,KAAKH,EAAEM,UAChBC,GAAIN,MAGZ,OACI,6BACI,kBAAC,IAAD,CACIV,UAAWA,EACXiB,OAAQV,EACRW,cAAc,QACdC,YAAY,MACZC,MAAO,CAAEC,OAAQ,W,QCtBpBC,EAAiB,SAAAC,GAC1B,MAAM,CACFC,KAJgB,WAKhBC,QAAUF,ICMZG,E,4MACFC,MAAQ,CACJC,WAAY,GACZC,WAAW,G,EAGfC,gBAAkB,SAACC,GACf,EAAKC,SAAS,CACVH,WAAW,IAEf,EAAKvB,MAAMgB,eAAeS,EAAEE,mB,EAGhCC,iBAAmB,WACf,EAAKF,SAAS,CAAEH,WAAW,K,kEAI3BM,KAAKH,SAAS,CACVJ,WAAYQ,EAAKC,Y,+BAIf,IAAD,OACGT,EAAeO,KAAKR,MAApBC,WACR,OACI,yBAAKU,UAAU,QACVV,EAAWpB,KAAI,SAAAuB,GAAC,OACb,kBAACQ,EAAA,EAAD,CAAMD,UAAU,aACZ,kBAACC,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKC,IAAMtB,OAAO,QAC1C,kBAACkB,EAAA,EAAKK,KAAN,KACI,kBAACL,EAAA,EAAKM,MAAN,KAAad,EAAEe,WACf,kBAACP,EAAA,EAAKQ,KAAN,KACKhB,EAAEiB,IAEP,kBAACC,EAAA,EAAD,CAAQR,QAAQ,UAAUS,QAAS,kBAAM,EAAKpB,gBAAgBC,KAA9D,uBAIZ,kBAAC,IAAD,CACIoB,OAAQhB,KAAKR,MAAME,UACnBuB,aAAa,yBAEb,4BAAQF,QAASf,KAAKD,kBAAtB,eACA,kBAAC,EAAD,Y,GA5CGmB,aAyDRlD,cAAQ,MANI,SAAAmD,GACvB,OAAOC,YACH,CAACjC,kBAAiBgC,KAIXnD,CAAkCuB,G,MCtDlC8B,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DChBN,IAAIC,EAAe,GCEJC,kBAAgB,CACvB1D,aDFO,WACd,IADuCsB,EACxC,uDADgDmC,EAAcE,EAC9D,uCACI,OAAOA,EAAOxC,MACV,IJNgB,WIQZ,OADAG,EAAQqC,EAAOvC,QAGnB,QAAU,OAAOE,MEDnBvB,EAAQ6D,YAAYC,GAC1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUjE,MAASA,GACjB,kBAAC,EAAD,QAGJkE,SAASC,eAAe,SHmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.600f38e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Usericon.eae6ce30.png\";","import React from \"react\"\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar'\r\nimport moment from 'moment'\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"\r\nimport { connect } from \"react-redux\"\r\n\r\nconst localizer = momentLocalizer(moment)\r\n\r\nconst MyCalendar = props => {\r\n    const useractivity= props.userActivity.map( (d,i) => \r\n    {\r\n        return({\r\n            start: new Date(d.start_time),\r\n            end: new Date(d.end_time),\r\n            id: i\r\n        })\r\n    })\r\n    return (\r\n        <div>\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={useractivity}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                style={{ height: 500 }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = store => {\r\n    return{\r\n        userActivity: store.userActivity\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(MyCalendar)","export const ACTIVITY = \"ACTIVITY\"\r\n\r\nexport const activityRecord = activities => {\r\n    return{\r\n        type : ACTIVITY,\r\n        payload : activities\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport data from '../Data/Test JSON.json'\r\nimport ReactModal from 'react-modal'\r\nimport icon from \"../Images/Usericon.png\"\r\nimport \"../Styles/userlist.css\"\r\nimport { Card, Button } from \"react-bootstrap\"\r\nimport MyCalendar from \"./MyCalendar\"\r\nimport { connect } from 'react-redux'\r\nimport { bindActionCreators } from \"redux\"\r\nimport {activityRecord} from \"../Actions/Actions\"\r\n\r\nclass Userlist extends Component {\r\n    state = {\r\n        userrecord: [],\r\n        showModal: false        \r\n    }\r\n\r\n    handleOpenModal = (n) => {\r\n        this.setState({ \r\n            showModal: true            \r\n        });\r\n        this.props.activityRecord(n.activity_periods)\r\n    }\r\n\r\n    handleCloseModal = () => {\r\n        this.setState({ showModal: false });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            userrecord: data.members\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { userrecord } = this.state\r\n        return (\r\n            <div className=\"list\">\r\n                {userrecord.map(n =>\r\n                    <Card className=\"cardStyle\" >\r\n                        <Card.Img variant=\"top\" src={icon} height=\"250\" />\r\n                        <Card.Body>\r\n                            <Card.Title>{n.real_name}</Card.Title>\r\n                            <Card.Text>\r\n                                {n.tz}\r\n                            </Card.Text>\r\n                            <Button variant=\"primary\" onClick={() => this.handleOpenModal(n)}>Activity Track</Button>\r\n                        </Card.Body>\r\n                    </Card>\r\n                )}\r\n                <ReactModal\r\n                    isOpen={this.state.showModal}\r\n                    contentLabel=\"Minimal Modal Example\"\r\n                >\r\n                    <button onClick={this.handleCloseModal}>Close Modal</button>\r\n                    <MyCalendar />\r\n                </ReactModal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return bindActionCreators(\r\n        {activityRecord}, dispatch\r\n    )\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Userlist)","import React from 'react';\nimport './App.css';\nimport Userlist from \"./Assets/Components/Userlist\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\n  return (\n    <div>\n      <Userlist />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {ACTIVITY} from \"../Actions/Actions\"\r\n\r\nlet defaultstate = []\r\nexport default function ActivityReducer(state = defaultstate, action)\r\n{\r\n    switch(action.type){\r\n        case ACTIVITY : {\r\n            state = action.payload\r\n            return state\r\n        }\r\n        default : return state\r\n    }\r\n}","import React from \"react\"\r\nimport ActivityReducer from \"./ActivityReducer\"\r\nimport {combineReducers} from \"redux\"\r\n\r\nexport default combineReducers({\r\n        userActivity: ActivityReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from \"./Assets/Reducers/CombineReducers\"\nimport {createStore} from \"redux\"\nimport {Provider} from \"react-redux\"\n\nconst store = createStore(reducer)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}